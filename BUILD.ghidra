# The Ghidra decompiler builds three native executables we want to alter.
#  * decompile - the decompiler subprocess accessed by Ghidra's Java front end.  This gets installed at
#    `.../ghidra_11.4_DEV/Ghidra/Features/Decompiler/os/linux_x86_64/decompile`.
#  * decompile_unittest - a decompiler unit test framework
#  * decompile_datatest - a decompiler console used in data tests and plugin development

# decompiler source file location in the imported Ghidra release tar file
SRCDIR = "Ghidra/Features/Decompiler/src/decompile/cpp/"

# Common source files, each with a .cc extension
DECOMP_CPP_FILES = [
    "action",
    "address",
    "architecture",
    "block",
    "blockaction",
    "capability",
    "cast",
    "comment",
    "condexe",
    "constseq",
    "coreaction",
    "cover",
    "cpool",
    "crc32",
    "database",
    "double",
    "dynamic",
    "emulate",
    "emulateutil",
    "float",
    "flow",
    "fspec",
    "funcdata",
    "funcdata_block",
    "funcdata_op",
    "funcdata_varnode",
    "grammar",
    "globalcontext",
    "graph",
    "heritage",
    "jumptable",
    "loadimage",
    "marshal",
    "memstate",
    "merge",
    "modelrules",
    "multiprecision",
    "op",
    "opbehavior",
    "opcodes",
    "options",
    "override",
    "paramid",
    "pcodeinject",
    "pcoderaw",
    "prefersplit",
    "prettyprint",
    "printc",
    "printjava",
    "printlanguage",
    "rangeutil",
    "ruleaction",
    "signature",
    "space",
    "stringmanage",
    "subflow",
    "transform",
    "translate",
    "type",
    "typeop",
    "unionresolve",
    "userop",
    "variable",
    "varmap",
    "varnode",
    "xml",
]

# Common source header files, each with a .hh extension
DECOMP_HDRS = [
    "action",
    "address",
    "architecture",
    "block",
    "blockaction",
    "capability",
    "cast",
    "comment",
    "compression",
    "condexe",
    "context",
    "constseq",
    "coreaction",
    "cover",
    "cpool",
    "crc32",
    "database",
    "double",
    "dynamic",
    "emulate",
    "emulateutil",
    "error",
    "filemanage",
    "float",
    "flow",
    "fspec",
    "funcdata",
    "globalcontext",
    "grammar",
    "graph",
    "heritage",
    "jumptable",
    "loadimage",
    "marshal",
    "memstate",
    "merge",
    "modelrules",
    "multiprecision",
    "op",
    "opbehavior",
    "opcodes",
    "options",
    "override",
    "paramid",
    "partmap",
    "plugin_manager",
    "pcodeinject",
    "pcoderaw",
    "prefersplit",
    "prettyprint",
    "printc",
    "printjava",
    "printlanguage",
    "rangemap",
    "rangeutil",
    "ruleaction",
    "semantics",
    "signature",
    "slaformat",
    "sleigh",
    "sleigh_arch",
    "sleighbase",
    "slghpattern",
    "slghsymbol",
    "slghpatexpress",
    "space",
    "stringmanage",
    "subflow",
    "transform",
    "translate",
    "type",
    "typeop",
    "unionresolve",
    "userop",
    "variable",
    "varnode",
    "xml",
    "varmap",
]

# Build rules for common source files
# Note: only those headers declared under `hdrs` will be visible to plugin builds.
cc_library(
    name = "decomp_lib",
    visibility = ["//visibility:public"],
    srcs = [SRCDIR + f + ".cc" for f in DECOMP_CPP_FILES],
    hdrs = [SRCDIR + f + ".hh" for f in DECOMP_HDRS] + [
        SRCDIR + "types.h",
    ],
    copts = [
        "-Wall",
        "-Wno-sign-compare",
    ],
    deps = [
        "@spdlog//:spdlog",
    ],
)

# The decompiler process invoked by ghidra and fed via a socket,
# usually installed in a directory like /opt/ghidra_11.4_DEV/Ghidra/Features/Decompiler/os/linux_x86_64
cc_binary(
    name = "decompile",
    srcs = [
        SRCDIR + f
        for f in [
            "comment_ghidra.hh",
            "comment_ghidra.cc",
            "cpool_ghidra.hh",
            "cpool_ghidra.cc",
            "database_ghidra.hh",
            "database_ghidra.cc",
            "ghidra_arch.hh",
            "ghidra_arch.cc",
            "ghidra_context.hh",
            "ghidra_context.cc",
            "ghidra_process.hh",
            "ghidra_process.cc",
            "ghidra_translate.hh",
            "ghidra_translate.cc",
            "inject_ghidra.hh",
            "inject_ghidra.cc",
            "loadimage_ghidra.hh",
            "loadimage_ghidra.cc",
            "plugin_manager.cc",
            "string_ghidra.hh",
            "string_ghidra.cc",
            "typegrp_ghidra.hh",
            "typegrp_ghidra.cc",
        ]
    ],
    copts = [
        "-O2",
        "-Wall",
        "-Wno-sign-compare",
    ],
    linkopts = [
        "-Wl,-export-dynamic",
        "-Wl,-lz",
    ],
    deps = [
        ":decomp_lib",
        "@spdlog//:spdlog",
    ],
)

# Unit test framework
cc_binary(
    name = "decompile_unittest",
    srcs = [
        SRCDIR + f
        for f in [
            "callgraph.hh",
            "callgraph.cc",
            "compression.cc",
            "context.cc",
            "filemanage.cc",
            "ifacedecomp.hh",
            "ifacedecomp.cc",
            "ifaceterm.hh",
            "inject_sleigh.hh",
            "inject_sleigh.cc",
            "interface.hh",
            "interface.cc",
            "libdecomp.hh",
            "libdecomp.cc",
            "loadimage_xml.hh",
            "loadimage_xml.cc",
            "pcodeparse.hh",
            "pcodeparse.cc",
            "pcodecompile.hh",
            "pcodecompile.cc",
            "plugin_manager.cc",
            "semantics.cc",
            "slaformat.hh",
            "slaformat.cc",
            "sleigh.cc",
            "slghpatexpress.cc",
            "slghpattern.cc",
            "slghsymbol.cc",
            "sleighbase.hh",
            "sleighbase.cc",
            "sleigh_arch.hh",
            "sleigh_arch.cc",
            "test.hh",
            "test.cc",
            "testfunction.hh",
            "testfunction.cc",
            "xml_arch.hh",
            "xml_arch.cc",
        ]
    ],
    copts = [
        "-Wall",
        "-Wno-sign-compare",
    ],
    defines = [
        "__TERMINAL__",
    ],
    linkopts = [
        "-Wl,-export-dynamic",
        "-Wl,-lz",
    ],
    deps = [
        ":decomp_lib",
        "@spdlog//:spdlog",
    ],
)

# decompiler console interface for data tests
cc_binary(
    name = "decompile_datatest",
    srcs = [
        SRCDIR + f
        for f in [
            "callgraph.hh",
            "callgraph.cc",
            "compression.cc",
            "consolemain.cc",
            "context.cc",
            "filemanage.cc",
            "float.cc",
            "ifacedecomp.hh",
            "ifacedecomp.cc",
            "ifaceterm.hh",
            "ifaceterm.cc",
            "inject_sleigh.hh",
            "inject_sleigh.cc",
            "interface.hh",
            "interface.cc",
            "libdecomp.hh",
            "libdecomp.cc",
            "loadimage_xml.hh",
            "loadimage_xml.cc",
            "pcodecompile.hh",
            "pcodecompile.cc",
            "pcodeparse.hh",
            "pcodeparse.cc",
            "plugin_manager.cc",
            "semantics.cc",
            "slaformat.hh",
            "slaformat.cc",
            "slghpatexpress.cc",
            "slghpattern.cc",
            "sleigh_arch.hh",
            "sleigh_arch.cc",
            "sleigh.hh",
            "sleigh.cc",
            "sleighbase.hh",
            "sleighbase.cc",
            "slghsymbol.hh",
            "slghsymbol.cc",
            "testfunction.hh",
            "testfunction.cc",
            "xml_arch.hh",
            "xml_arch.cc",
        ]
    ],
    copts = [
        "-Wall",
        "-Wno-sign-compare",
    ],
    defines = [
        "__TERMINAL__",
    ],
    linkopts = [
        "-Wl,-export-dynamic",
        "-Wl,-lz",
    ],
    deps = [
        ":decomp_lib",
        "@spdlog//:spdlog",
    ],
)
